# 方針: DFS(深さ優先探索)
# なぜこの方針を立てられるのか？
# 制約をうまく利用して、再帰的に分岐を繰り返すとしか言いようがないなー
# DFSをもっと勉強しないと...まあでも迷路の問題と一緒か！壁があれば行かない、壁がなければ行くみたいな...

n = int(input())


def dfs(s, left, right):
    """
    たとえば、n=6なら、使える左括弧3, 使える右括弧3が与えられる
    制約として、左括弧はいつでも使っていいが、右括弧は左括弧よりも少ない時しか使えない
    なので、最初は左括弧を使うので、left=2, right=3となる
    次の分岐としては、左括弧を使うか、右括弧を使うかの2通りがある
    - left=1, right=3
    - left=2, right=2
    この1or2通りの分岐を再帰的に繰り返す(left=rightの時は、左括弧を使うしかない)

    Parameters
        s: 現在の文字列
        left: 使える左括弧の数
        right: 使える右括弧の数
    """
    print("s:", s, "left:", left, "right:", right)

    # 左括弧と右括弧を使い切った場合に、出力
    if left == right == 0:
        print(s)
        return

    # 左括弧は足す場合
    if left > 0:
        dfs(s + '(', left-1, right)

    # 右括弧を足す場合
    # ただし、左括弧のほうが右括弧よりも使われていなければならない。
    if right > 0 and left < right:
        dfs(s + ')', left, right-1)


if n % 2 == 0:
    dfs('', n//2, n//2)
